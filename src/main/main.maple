#################################################################################################
$include <firstentry.maple> ;
$include <X_q.maple> ;
$include <X_qsort.maple> ;
$include <labelmakers.maple> ;
$include <r1.maple> ;
$include <r2.maple> ;
$include <t1.maple> ;
$include <t2.maple> ;
$include <s2.maple> ;
$include <s1.maple> ;
$include <triplesindexer.maple> ;
$include <bigiterator.maple> ;
$include <tori.maple> ;
$include <characterfamilies.maple> ;
$include <weighttwister.maple> ;
$include <stabilizer.maple> ;
$include <DMsort.maple> ;
##################################################################################################

interface(rtablesize=infinity):
que := 8;

##################################################################################################

#Here are the parameters for the characters.
r1, r1_lt := calculate_r1(que):
r2, r2_lt := calculate_r2(que):
t1, t1_lt := calculate_t1(que):
t2, t2_lt := calculate_t2(que):
s2, s2_lt := calculate_s2(que):
s1, s1_lt := calculate_s1(que):
t1triples,t2triples:=triplesbuilder(que):

r1;
##################################################################################################
#Here is the primary main program sequence. It produces the Z-basis for the decomposition matrix.

nrchars := (que+1) * (que^2+que+4);
nrBrchars := que^3;

#DM := Matrix(nrchars, nrBrchars):
#DMlbl := Array(1..nrchars, datatype=string):

#X_q := calculate_X_q(que):
#X_qsort(X_q,que):
#bigiterator(que,DM,X_q,t1_lt,t2_lt,r1_lt,r2_lt,s1_lt,s2_lt,DMlbl,t1triples,t2triples):
#stabilizer(que,X_q,DM):

##################################################################################################

#Everything from here down is an optional sequence for viewing different portions of the matrix
#and other possibilities for manipulation in various case for various reasons.

##################################################################################################

#This algorithm will write -1 to the left of the rightmost nonzero entry in each row, for use in
#latex formatting. The resulting nonnegative entries are all decomposition numbers. 

#entryfound:=Array(1..nrchars, fill = false, datatype=boolean);
#i:=1;
#while not (i=nrchars+1) do
#j:=nrBrchars:
#   while not (j=0) do
#          if entryfound[i] then
# 		 DM[i,j]:=-1;
# 	  end if;
#          if DM[i,j]<>0 then
#               entryfound[i]:=true;
# 	      j:=j-1;
# 	      else j:=j-1; 
#         end if;
#  end do;
#i:=i+1:
#end do;

#entryfound;
#DM;

##################################################################################################

#This function will sort the matrix by pushing zeros upwards. This is purely for visual appeal.
#DMsort(DM,DMlbl,nrchars,nrBrchars);

##################################################################################################

#In the case Sp(6,2), the decomposition numbers were known. The following re-orders by character degree as in the known result
#Sp62degrees:=Array([1,35,15,27,7,84,168,280,216,120,56,512,21,189,105,105,21,336,35,70,280,105,210,210,420,189,378,405,189,315]);

#for i from 1 to 29 do
#    for j from 1 to 29 do
#    	if Sp62degrees[j]>Sp62degrees[j+1] then
#	   DMlblstore:=DMlbl[j+1];
#	   DMlbl[j+1]:=DMlbl[j];
#	   DMlbl[j]:=DMlblstore;
#
#	   DMstore:=DM[j+1];
#	   DM[j+1]:=DM[j];
#	   DM[j]:=DMstore;
#	   degstore:=Sp62degrees[j+1];
#	   Sp62degrees[j+1]:=Sp62degrees[j];
#	   Sp62degrees[j]:=degstore;
#	end if;
#     end do;
#end do;

#Sp62degrees;
#DM;

##################################################################################################

#For q=2,4, the matrix DM is small enough to reasonably view in terminal
#DM;

##################################################################################################

#Since the algorithm gives that there is accumulating error from right to left,
#the first non-zero entry is a decomposition number for each row. The following extracts those values.
#Also serves as a check for the algorithm (fractions and negatives not allowed). 

#test:=Array(1..nrchars, fill=0, datatype=integer):
#firstentry(nrchars, nrBrchars, DM, test):
#test;

##################################################################################################

#The labels themselves are not unintereresting. Also serves as a check for the algorithm.
#DMlbl;

##################################################################################################

#For q>4, the matrix is too large to view in entirety. To show some rows, use the following.
#for i from 1 to 15 do
#    DM[i];
#end do;

##################################################################################################

#When curious which weight gave rise to an entry, the following is sometimes useful.
#for i from 1 to 64 do
#  X_q[i];
#end do;

##################################################################################################

#To work with one weight at a time, the following will produce a single column of the decomposition matrix. 
#DMcolumn:= Matrix(nrchars,1):
#a:=12;
#b:=7;
#c:=0;
#weighttwister(a,b,c,nrBrchars,que,DMcolumn,t1_lt,t2_lt,r1_lt,r2_lt,s1_lt,s2_lt,DMlbl,t1triples,t2triples);
#DMcolumn;
#DMlbl;

##################################################################################################

#For the column headers, if you wish to compile as a .tex file
#DMLambdalbl, DMPhilbl := calculatelbls(X_q,que):
#writeto(`Philbls4.txt`);
#DMPhilbl;

##################################################################################################
#The following writes the matrix in .tex format for a table

#FileTools[Text][Open]("output8.txt"):
#for i from 1 to nrchars do
#    FileTools[Text][WriteString]("output8.txt",DMlbl[i]):
#    for j from 1 to nrBrchars do
#        FileTools[Text][WriteString]("output8.txt", cat(" & ",convert( DM[i,j],string)));
#    end do:
#    FileTools[Text][WriteString]("output8.txt", "\\\\\n"):
#end do:
#FileTools[Text][Close]("output8.txt"):

##################################################################################################

#This writes just one column worth of data at a time
#FileTools[Text][Open]("output8col1270x.txt"):
#for i from 1 to nrchars do
#    FileTools[Text][WriteString]("output8col1270x.txt", convert(DMcolumn[i,1],string)):
#    FileTools[Text][WriteString]("output8col1270x.txt",DMlbl[i]):
#end do:
#FileTools[Text][Close]("output8col1270x.txt"):

